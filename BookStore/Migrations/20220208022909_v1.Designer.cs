// <auto-generated />
using System;
using BookStore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220208022909_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookStore.Domain.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Book", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Eric Evans",
                            CategoryId = 1,
                            Isbn = "8721893718",
                            Price = 50m,
                            ReleaseDate = new DateTime(1990, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Domain-Driven Design: Tackling Complexity in the Heart of Software"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Robert C. Martin",
                            CategoryId = 2,
                            Isbn = "7632153123",
                            Price = 35m,
                            ReleaseDate = new DateTime(1990, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Agile Principles, Patterns, and Practices in C#"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Robert C. Martin",
                            CategoryId = 3,
                            Isbn = "6372168304",
                            Price = 22m,
                            ReleaseDate = new DateTime(1990, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Clean Code: A Handbook of Agile Software Craftsmanship"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Vaughn Vernon",
                            CategoryId = 4,
                            Isbn = "7812382103",
                            Price = 34m,
                            ReleaseDate = new DateTime(1990, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Implementing Domain-Driven Design"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Scott Millet",
                            CategoryId = 2,
                            Isbn = "8812936542",
                            Price = 15m,
                            ReleaseDate = new DateTime(1990, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Patterns, Principles, and Practices of Domain-Driven Design"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Martin Fowler",
                            CategoryId = 1,
                            Isbn = "5892187320",
                            Price = 13m,
                            ReleaseDate = new DateTime(1990, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Refactoring: Improving the Design of Existing Code"
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Terror"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ficção"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Book", b =>
                {
                    b.HasOne("BookStore.Domain.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookStore.Domain.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
